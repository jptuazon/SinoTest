library(devtools)
install.packages(devtools)
install.packages("devtools")
create_package("C:/Users/Justin/Desktop/SamplePackage/samppackage")
library(devtools)
library(regexcite)
install.and.load <- function(...) {
packages <- unlist(list(...))
present <- unlist(lapply(packages, require, character.only = TRUE))
needed <- packages[present == FALSE]
if (length(needed) > 0) {
install.packages(needed)
lapply(needed, require, character.only = TRUE)
}
for (package in packages) {
library(package, character.only = TRUE)
}
}
install.and.load("devtools", "roxygen2", "testthat", "knitr")
library(sinoTest)
ls(sinoTEst)
ls(sinoTest)
ls("sinoTest")
ls("package:sinoTest")
library(SinoTest)
sino_test(rnorm(100))
sino_test(rnorm(501))
library(devtools)
install_github("jptuazon/sino-test")
install_github("jptuazon/SinoTest")
install_github("jptuazon/sino-test/@master")
install_github("jptuazon/sino-test", ref = "master")
library(SinoTest)
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(100))
SINO_TEST(rnorm(52))
?sino_test
remove.packages("SinoTest")
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
?sino_test
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
library(SinoTest)
sino_test(rnorm(350))
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1001))
rnorm(5)
sino_test(rnorm(5))
sino_test(rnorm(502))
sino_test(rexp(802))
sino_test(rexp(900))
SinoTest::null_densities
x <- SinoTest::null_densities
x[[996]]
remove.packages("SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
?sino_test
library(SinoTest)
?sino_test
remove.packages("SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rexp(100))
sino_test(rexp(100))
sino_test(rexp(100))
sino_test(rexp(100))
sino_test(rexp(100))
x <- rnorm(100)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
install.packages("githubinstall")
library(githubinstall)
githubinstall("SinoTest")
remove.packages("cubature")
remove.packages("spatstat.explore")
remove.packages("SinoTest")
install_github("jptuazon/SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
install_github("jptuazon/SinoTest", dependencies = TRUE)
library(devtools)
install_github("jptuazon/SinoTest", dependencies = TRUE)
library(SinoTest)
sino_test(rnorm(100))
remove.packages("cubature")
library(spatstat)
library(spatstat.utils)
library(spatstat.sparse)
remove.packages("spatstat")
remove.packages("spatstat.data")
remove.packages("spatstat.explore")
remove.packages("spatstat.geom")
remove.packages("spatstat.linnet")
remove.packages("spatstat.model")
remove.packages("spatstat.random")
remove.packages("spatstat.sparse")
remove.packages("spatstat.utils")
remove.packages("SinoTest")
library(stats)
library(cubature)
library(spatstat.explore)
## Function for calculating test statistic
sino_stat <- function(dat, prec, dlim) {
dat <- (dat - mean(dat)) / sd(dat)
kde <- density(dat, n = prec, cut = dlim)
kde_pdf <- approxfun(kde, yleft = 0, yright = 0)
abs_diff <- function(v) {
return(abs(kde_pdf(v) - dnorm(v)))
}
return(cubintegrate(abs_diff, lower = -Inf, upper = Inf,
method = "pcubature")$integral)
}
## Function for estimating the null distribution
sino_null <- function(size, prec, dlim, sims) {
i <- 1
test_stats <- rep(0, sims)
while (i <= sims) {
set.seed(i)
rand_samp <- rnorm(size)
test_stats[i] <- sino_stat(rand_samp, prec, dlim)
i <- i + 1
}
kde <- density(test_stats, n = prec, cut = dlim)
return(kde)
}
set.seed(123)
samp_sizes <- seq(1001, 1500)
null_dists_3 <- list()
null_pdfs_3 <- list()
i <- 1
for (samp_size in samp_sizes) {
print(samp_size)
null_dists_3[[i]] <- sino_null(samp_size, 1024, 10, 5000)
null_pdfs_3[[i]] <- approxfun(null_dists_3[[i]], yleft = 0, yright = 0)
i <- i + 1
}
load("C:/Users/Justin/Desktop/SiNo/SinoTest/data/null_densities.rda")
null_densities <- append(null_densities, null_dists_3)
save(null_densities, "Nulls (n = 5 tp 1500).rda")
setwd("C:\\Users\\Justin\\Desktop\\SiNo\\SinoTest")
save(null_densities, file = "Nulls (n = 5 tp 1500).rda")
remove.packages("SinoTest")
