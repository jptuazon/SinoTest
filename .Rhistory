library(devtools)
install.packages(devtools)
install.packages("devtools")
create_package("C:/Users/Justin/Desktop/SamplePackage/samppackage")
library(devtools)
library(regexcite)
install.and.load <- function(...) {
packages <- unlist(list(...))
present <- unlist(lapply(packages, require, character.only = TRUE))
needed <- packages[present == FALSE]
if (length(needed) > 0) {
install.packages(needed)
lapply(needed, require, character.only = TRUE)
}
for (package in packages) {
library(package, character.only = TRUE)
}
}
install.and.load("devtools", "roxygen2", "testthat", "knitr")
library(sinoTest)
ls(sinoTEst)
ls(sinoTest)
ls("sinoTest")
ls("package:sinoTest")
library(SinoTest)
sino_test(rnorm(100))
sino_test(rnorm(501))
library(devtools)
install_github("jptuazon/sino-test")
install_github("jptuazon/SinoTest")
install_github("jptuazon/sino-test/@master")
install_github("jptuazon/sino-test", ref = "master")
library(SinoTest)
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(100))
SINO_TEST(rnorm(52))
?sino_test
remove.packages("SinoTest")
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
install.packages("SinoTest", repos = "https://github.com/jptuazon/SinoTest", dependencies = TRUE)
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
?sino_test
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
library(SinoTest)
sino_test(rnorm(350))
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1000))
sino_test(rnorm(1001))
rnorm(5)
sino_test(rnorm(5))
sino_test(rnorm(502))
sino_test(rexp(802))
sino_test(rexp(900))
SinoTest::null_densities
x <- SinoTest::null_densities
x[[996]]
remove.packages("SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
?sino_test
library(SinoTest)
?sino_test
remove.packages("SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rnorm(100))
sino_test(rexp(100))
sino_test(rexp(100))
sino_test(rexp(100))
sino_test(rexp(100))
sino_test(rexp(100))
x <- rnorm(100)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
sino_test(x)
install.packages("githubinstall")
library(githubinstall)
githubinstall("SinoTest")
remove.packages("cubature")
remove.packages("spatstat.explore")
remove.packages("SinoTest")
install_github("jptuazon/SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
install_github("jptuazon/SinoTest", dependencies = TRUE)
library(devtools)
install_github("jptuazon/SinoTest", dependencies = TRUE)
library(SinoTest)
sino_test(rnorm(100))
remove.packages("cubature")
library(spatstat)
library(spatstat.utils)
library(spatstat.sparse)
remove.packages("spatstat")
remove.packages("spatstat.data")
remove.packages("spatstat.explore")
remove.packages("spatstat.geom")
remove.packages("spatstat.linnet")
remove.packages("spatstat.model")
remove.packages("spatstat.random")
remove.packages("spatstat.sparse")
remove.packages("spatstat.utils")
remove.packages("SinoTest")
install_github("jptuazon/SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(1500))
remove.packages("SinoTest")
library(devtools)
install_github(SinoTest)
install_github("jptuazon/SinoTest")
library(SinoTest)
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
sino_test(rnorm(1500))
?sino_test
library(SinoTest)
samp_sizes <- c(10, 20, 30, 50, 75, 100, 200, 500)
power_table <- data.frame(
samp_size = samp_sizes,
laplace_0_1 = rep(NA,length(samp_sizes)),
t_5 = rep(NA,length(samp_sizes)),
t_20 = rep(NA,length(samp_sizes)),
logistic_0_1 = rep(NA,length(samp_sizes)),
u_0_1 = rep(NA,length(samp_sizes)),
beta_5 = rep(NA,length(samp_sizes)),
chi_15 = rep(NA,length(samp_sizes)),
exp_1 = rep(NA,length(samp_sizes)),
lognormal_0_1 = rep(NA,length(samp_sizes))
)
power_table
t_5_powers <- rep(NA,length(samp_sizes))
library(VGAM)
install.packages("VGAM")
library(SinoTest)
library(VGAM)
rlaplace(10)
sino_test(rlaplace(50))
sino_test(rlaplace(50))
sino_test(rlaplace(50))
sino_test(rlaplace(50))
x <- sino_test(rnorm(100))
x$p_value
1 < 2 || 2 > 1
1 < 2 || 2 > 3
1 < 0 || 2 > 3
library(SinoTest)
library(VGAM)
set.seed(123)
samp_sizes <- c(10, 20, 30, 50, 75, 100, 200, 500)
trials <- 10000
power_table <- data.frame(
samp_size = samp_sizes,
laplace_0_1 = rep(NA,length(samp_sizes)),
t_5 = rep(NA,length(samp_sizes)),
t_20 = rep(NA,length(samp_sizes)),
logistic_0_1 = rep(NA,length(samp_sizes)),
u_0_1 = rep(NA,length(samp_sizes)),
beta_5 = rep(NA,length(samp_sizes)),
chi_15 = rep(NA,length(samp_sizes)),
exp_1 = rep(NA,length(samp_sizes)),
lognormal_0_1 = rep(NA,length(samp_sizes))
)
laplace_0_1_powers <- rep(NA,length(samp_sizes))
t_5_powers <- rep(NA,length(samp_sizes))
t_20_powers <- rep(NA,length(samp_sizes))
logistic_0_1_powers <- rep(NA,length(samp_sizes))
u_0_1_powers <- rep(NA,length(samp_sizes))
beta_5_powers <- rep(NA,length(samp_sizes))
chi_15_powers <- rep(NA,length(samp_sizes))
exp_1_powers <- rep(NA,length(samp_sizes))
lognormal_0_1_powers <- rep(NA,length(samp_sizes))
for (i in 1:length(samp_sizes)) {
size <- samp_sizes[i]
print(size)
laplace_0_1_current <- 0
t_5_current <- 0
t_20_current <- 0
logistic_0_1_current <- 0
u_0_1_current <- 0
beta_5_current <- 0
chi_15_current <- 0
exp_1_current <- 0
lognormal_0_1_current <- 0
for (j in 1:trials) {
x <- rlaplace(size)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
laplace_0_1_current <- laplace_0_1_current + 1
}
x <- rt(size, 5)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
t_5_current <- t_5_current + 1
}
x <- rt(size, 20)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
t_20_current <- t_20_current + 1
}
x <- logis(size)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
logistic_0_1_current <- logistic_0_1_current + 1
}
x <- runif(size)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
u_0_1_current <- u_0_1_current + 1
}
x <- rbeta(size, 5, 5)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
beta_5_current <- beta_5_current + 1
}
x <- rchisq(size, df = 15)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
chi_15_current <- chi_15_current + 1
}
x <- rexp(size)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
exp_1_current <- exp_1_current + 1
}
x <- rlnorm(size)
if (!((x$p_value <= 0.05) || (x$p_value == "< 0.00001"))) {
lognormal_0_1_current <- lognormal_0_1_current + 1
}
}
laplace_0_1_powers[i] <- 1 - (laplace_0_1_current / trials)
t_5_powers[i] <- 1 - (t_5_current / trials)
t_20_powers[i] <- 1 - (t_20_current / trials)
logistic_0_1_powers[i] <- 1 - (logistic_0_1_current / trials)
u_0_1_powers[i] <- 1 - (u_0_1_current / trials)
beta_5_powers[i] <- 1 - (beta_5_current / trials)
chi_15_powers[i] <- 1 - (chi_15_current / trials)
exp_1_powers[i] <- 1 - (exp_1_current / trials)
lognormal_0_1_powers[i] <- 1 - (lognormal_0_1_current / trials)
}
library(SinoTest)
library(VGAM)
set.seed(123)
samp_sizes <- c(10, 20, 30, 50, 75, 100, 200, 500)
trials <- 10000
power_table <- data.frame(
samp_size = samp_sizes,
laplace_0_1 = rep(NA,length(samp_sizes)),
t_5 = rep(NA,length(samp_sizes)),
t_20 = rep(NA,length(samp_sizes)),
logistic_0_1 = rep(NA,length(samp_sizes)),
u_0_1 = rep(NA,length(samp_sizes)),
beta_5 = rep(NA,length(samp_sizes)),
chi_15 = rep(NA,length(samp_sizes)),
exp_1 = rep(NA,length(samp_sizes)),
lognormal_0_1 = rep(NA,length(samp_sizes))
)
laplace_0_1_powers <- rep(NA,length(samp_sizes))
t_5_powers <- rep(NA,length(samp_sizes))
t_20_powers <- rep(NA,length(samp_sizes))
logistic_0_1_powers <- rep(NA,length(samp_sizes))
u_0_1_powers <- rep(NA,length(samp_sizes))
beta_5_powers <- rep(NA,length(samp_sizes))
chi_15_powers <- rep(NA,length(samp_sizes))
exp_1_powers <- rep(NA,length(samp_sizes))
lognormal_0_1_powers <- rep(NA,length(samp_sizes))
for (i in 1:length(samp_sizes)) {
size <- samp_sizes[i]
print(size)
laplace_0_1_current <- 0
t_5_current <- 0
t_20_current <- 0
logistic_0_1_current <- 0
u_0_1_current <- 0
beta_5_current <- 0
chi_15_current <- 0
exp_1_current <- 0
lognormal_0_1_current <- 0
for (j in 1:trials) {
x <- rlaplace(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
laplace_0_1_current <- laplace_0_1_current + 1
}
x <- rt(size, 5)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
t_5_current <- t_5_current + 1
}
x <- rt(size, 20)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
t_20_current <- t_20_current + 1
}
x <- logis(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
logistic_0_1_current <- logistic_0_1_current + 1
}
x <- runif(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
u_0_1_current <- u_0_1_current + 1
}
x <- rbeta(size, 5, 5)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
beta_5_current <- beta_5_current + 1
}
x <- rchisq(size, df = 15)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
chi_15_current <- chi_15_current + 1
}
x <- rexp(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
exp_1_current <- exp_1_current + 1
}
x <- rlnorm(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
lognormal_0_1_current <- lognormal_0_1_current + 1
}
}
laplace_0_1_powers[i] <- 1 - (laplace_0_1_current / trials)
t_5_powers[i] <- 1 - (t_5_current / trials)
t_20_powers[i] <- 1 - (t_20_current / trials)
logistic_0_1_powers[i] <- 1 - (logistic_0_1_current / trials)
u_0_1_powers[i] <- 1 - (u_0_1_current / trials)
beta_5_powers[i] <- 1 - (beta_5_current / trials)
chi_15_powers[i] <- 1 - (chi_15_current / trials)
exp_1_powers[i] <- 1 - (exp_1_current / trials)
lognormal_0_1_powers[i] <- 1 - (lognormal_0_1_current / trials)
}
library(SinoTest)
library(VGAM)
set.seed(123)
samp_sizes <- c(10, 20, 30, 50, 75, 100, 200, 500)
trials <- 10000
power_table <- data.frame(
samp_size = samp_sizes,
laplace_0_1 = rep(NA,length(samp_sizes)),
t_5 = rep(NA,length(samp_sizes)),
t_20 = rep(NA,length(samp_sizes)),
logistic_0_1 = rep(NA,length(samp_sizes)),
u_0_1 = rep(NA,length(samp_sizes)),
beta_5 = rep(NA,length(samp_sizes)),
chi_15 = rep(NA,length(samp_sizes)),
exp_1 = rep(NA,length(samp_sizes)),
lognormal_0_1 = rep(NA,length(samp_sizes))
)
laplace_0_1_powers <- rep(NA,length(samp_sizes))
t_5_powers <- rep(NA,length(samp_sizes))
t_20_powers <- rep(NA,length(samp_sizes))
logistic_0_1_powers <- rep(NA,length(samp_sizes))
u_0_1_powers <- rep(NA,length(samp_sizes))
beta_5_powers <- rep(NA,length(samp_sizes))
chi_15_powers <- rep(NA,length(samp_sizes))
exp_1_powers <- rep(NA,length(samp_sizes))
lognormal_0_1_powers <- rep(NA,length(samp_sizes))
for (i in 1:length(samp_sizes)) {
size <- samp_sizes[i]
print(size)
laplace_0_1_current <- 0
t_5_current <- 0
t_20_current <- 0
logistic_0_1_current <- 0
u_0_1_current <- 0
beta_5_current <- 0
chi_15_current <- 0
exp_1_current <- 0
lognormal_0_1_current <- 0
for (j in 1:trials) {
x <- rlaplace(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
laplace_0_1_current <- laplace_0_1_current + 1
}
x <- rt(size, 5)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
t_5_current <- t_5_current + 1
}
x <- rt(size, 20)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
t_20_current <- t_20_current + 1
}
x <- rlogis(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
logistic_0_1_current <- logistic_0_1_current + 1
}
x <- runif(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
u_0_1_current <- u_0_1_current + 1
}
x <- rbeta(size, 5, 5)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
beta_5_current <- beta_5_current + 1
}
x <- rchisq(size, df = 15)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
chi_15_current <- chi_15_current + 1
}
x <- rexp(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
exp_1_current <- exp_1_current + 1
}
x <- rlnorm(size)
y <- sino_test(x)
if (!((y$p_value <= 0.05) || (y$p_value == "< 0.00001"))) {
lognormal_0_1_current <- lognormal_0_1_current + 1
}
}
laplace_0_1_powers[i] <- 1 - (laplace_0_1_current / trials)
t_5_powers[i] <- 1 - (t_5_current / trials)
t_20_powers[i] <- 1 - (t_20_current / trials)
logistic_0_1_powers[i] <- 1 - (logistic_0_1_current / trials)
u_0_1_powers[i] <- 1 - (u_0_1_current / trials)
beta_5_powers[i] <- 1 - (beta_5_current / trials)
chi_15_powers[i] <- 1 - (chi_15_current / trials)
exp_1_powers[i] <- 1 - (exp_1_current / trials)
lognormal_0_1_powers[i] <- 1 - (lognormal_0_1_current / trials)
}
remove.packages("SinoTest")
library(devtools)
install_github("jptuazon/SinoTest")
library(SinoTest)
?sino_test
?sino_test
setwd("C:\Users\Justin\Desktop\SiNo")
setwd("C:\\Users\\Justin\\Desktop\\SiNo")
load("Nulls (n = 1501 to 2000).rda")
setwd("./SinoTest")
load("Nulls (n = 5 to 1500).rda")
load("Nulls (n = 5 tp 1500).rda")
null_densities <- append(null_densities, null_dists_4)
load(Nulls (n = 5 to 15000).rda)
load("Nulls (n = 5 tp 1500).rda")
load("Nulls (n = 5 tp 1500).rda")
nulls_5_1500 <- null_densities
setwd("..")
load("Nulls (n = 1500 to 2000).rda")
load("Nulls (n = 1501 to 2000).rda")
x <- list(1,2,3)
x[[-1]]
x[-1]
nulls_1501_2000 <- null_dists_4[-1]
null_densities <- append(nulls_5_1500, nulls_1501_2000)
setwd("./SinoTest")
save(null_densities, file = "Nulls (n = 5 to 2000).rda")
library(devtools)
library(roxygen2)
document()
